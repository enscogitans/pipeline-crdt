common_params: &common_params
  M: &M 10
  l: &l 1
  t: 42
noise_bandit: &noise_bandit !Atom
  <<: *common_params
  get_all_actions_reward: !function src/bandits/drift/noise_bandit.get_all_actions_reward
  init: |
    parametrization = init_bandit(M)
  init_bandit: !function src/bandits/drift/noise_bandit.init_bandit
  name: noise_bandit
  run: |
    all_reward = get_all_actions_reward(parametrization, M, w)
    reward = np.zeros_like(all_reward)
    reward[actions] = all_reward[actions]
thompson_sampling_algorithm: &thompson_sampling_algorithm !Atom
  <<: *common_params
  init: |
    reward = None
    params = init_params(M)
  init_params: !function src/algorithms/multiarmed_bandits_policies/thompson_sampling.init_parameters
  name: thompson_sampling
  predict: !function src/algorithms/multiarmed_bandits_policies/thompson_sampling.predict
  run: |
    actions = predict(params, l)
    params = update(params, actions, reward)
  update: !function src/algorithms/multiarmed_bandits_policies/thompson_sampling.update
trial: &trial !Atom
  name: &trial_name simple-trial
  init: |
    round_count = int(round_count)
  iteration_results:
    actions: !measurement algorithm.actions
    all_reward: !measurement noise_bandit.all_reward
    parametrization: !measurement noise_bandit.parametrization
    round: !measurement i
  params:
    M: *M
    algorithm: *thompson_sampling_algorithm
    l: *l
    noise_bandit: *noise_bandit
    trial: *trial_name
    round_count: ${env.ROUNDCOUNT}
    w: 0.01
  run: |
    algorithm()
    for i in range(round_count):
        if i > 1:
            algorithm(reward=noise_bandit.reward)
        noise_bandit(actions=algorithm.actions, w=params.w)

        observe(iteration_results)
pipeline: !GenericPipeline
  runs:
    list0: *trial
    list1: !BasicStage
      name: mkdir
      script: mkdir -p ${env.TARGETFOLDER}/metrics ${env.TARGETFOLDER}/charts
    list2: !CumulativeOracleActionPercentage
      columns_mapping:
        all_action_rewards: !PythonExpression |
          lambda row: row['all_reward']
        selected_action_indexes: !PythonExpression |
          lambda row: row['actions']
      data_path: ${env.TARGETFOLDER}/data-*.parquet
      result_path: ${env.TARGETFOLDER}/metrics
    list3: !JupyterStage
      name: draw_graphs
      notebook_pipeline: experiments/simple/draw_graphs.draw_graphs_pipeline
some_dict:
  key: value_1
