# Licensed under the Apache License: http://www.apache.org/licenses/LICENSE-2.0
# For details: https://gitlab.com/mlrep/mldev/-/blob/master/NOTICE.md

common_params: &common_params
  M: &M 10
  l: &l 1
  log_path: &log_path /tmp/log


thompson_sampling_algorithm: &thompson_sampling_algorithm !Atom
  name: thompson_sampling
  <<: *common_params
  init_params: !function src/algorithms/multiarmed_bandits_policies/thompson_sampling.init_parameters
  predict: !function src/algorithms/multiarmed_bandits_policies/thompson_sampling.predict
  update: !function src/algorithms/multiarmed_bandits_policies/thompson_sampling.update
  init: |
    reward = None
    params = init_params(M)
    logger = init_logger(path)
  run: |
    actions = predict(params, l)
    params = update(params, actions, reward)


noise_bandit: &noise_bandit !Atom
  name: noise_bandit
  <<: *common_params
  init_bandit: !function src/bandits/drift/noise_bandit.init_bandit
  get_all_actions_reward: !function src/bandits/drift/noise_bandit.get_all_actions_reward
  init: |
    parametrization = init_bandit(M)
  run: |
    all_reward = get_all_actions_reward(parametrization, M, w)
    reward = np.zeros_like(all_reward)
    reward[actions] = all_reward[actions]


trial: &trial !Atom
  name: &trial_name simple-trial

  params:
    trial: *trial_name
    round_count: ${env.ROUNDCOUNT}
    M: *M
    l: *l
    w: 0.01
    noise_bandit: *noise_bandit
    [log_path, RE_UUID]: /home/user/log
    algorithm: *thompson_sampling_algorithm
    [log_path, RE_UUID]: *log_path

  iteration_results:
    round: !measurement i
    actions: !measurement algorithm.actions
    parametrization: !measurement noise_bandit.parametrization
    all_reward: !measurement noise_bandit.all_reward

  init: |
    round_count = int(round_count)

  run: |
    algorithm()
    for i in range(round_count):
        if i > 1:
            algorithm(reward=noise_bandit.reward)
        noise_bandit(actions=algorithm.actions, w=params.w)

        observe(iteration_results)


pipeline: !GenericPipeline
  runs:
  - *trial
  - !BasicStage
    name: echo
    script:
    - echo Hello World

  - !CumulativeOracleActionPercentage
    data_path: ${env.TARGETFOLDER}/data-*.parquet
    result_path: ${env.TARGETFOLDER}/metrics
    columns_mapping:
      selected_action_indexes: !PythonExpression |
        lambda row: row['actions']
      all_action_rewards: !PythonExpression |
        lambda row: row['all_reward']

  - !BasicStage
    name: mkdir
    script:
    - mkdir -p ${env.TARGETFOLDER}/metrics ${env.TARGETFOLDER}/charts

  - !JupyterStage
    name: draw_graphs
    notebook_pipeline: experiments/simple/draw_graphs.draw_graphs_pipeline

  - !BasicStage
    name: clear
    script:
    - rm -rf ${env.TARGETFOLDER}/tmp
