common_params: &common_params
  M: &M 10
  l: &l 1
thompson_sampling_algorithm: &thompson_sampling_algorithm !Atom
  name: thompson_sampling
  <<: *common_params
  init_params: !function src/algorithms/multiarmed_bandits_policies/thompson_sampling.init_parameters
  predict: !function src/algorithms/multiarmed_bandits_policies/thompson_sampling.predict
  update: !function src/algorithms/multiarmed_bandits_policies/thompson_sampling.update
  init: "reward = None\nparams = init_params(M)\n"
  run: "actions = predict(params, l)\nparams = update(params, actions, reward)\n"
  log: abc/def
noise_bandit: &noise_bandit !Atom
  name: noise_bandit
  <<: *common_params
  init_bandit: !function src/bandits/drift/noise_bandit.init_bandit
  get_all_actions_reward: !function src/bandits/drift/noise_bandit.get_all_actions_reward
  init: "parametrization = init_bandit(M)\n"
  run: "all_reward = get_all_actions_reward(parametrization, M, w)\nreward = np.zeros_like(all_reward)\n\
    reward[actions] = all_reward[actions]\n"
trial: &trial !Atom
  name: &trial_name simple-trial
  params:
    trial: *trial_name
    round_count: ${env.ROUNDCOUNT}
    M: *M
    l: *l
    w: 0.01
    noise_bandit: *noise_bandit
    algorithm: *thompson_sampling_algorithm
  iteration_results:
    round: !measurement i
    actions: !measurement algorithm.actions
    parametrization: !measurement noise_bandit.parametrization
    all_reward: !measurement noise_bandit.all_reward
  init: "round_count = int(round_count)\n"
  run: "algorithm()\nfor i in range(round_count):\n    if i > 1:\n        algorithm(reward=noise_bandit.reward)\n\
    \    noise_bandit(actions=algorithm.actions, w=params.w)\n\n    observe(iteration_results)\n"
pipeline: !GenericPipeline
  runs:
    list0: *trial
    list1: !BasicStage
      name: mkdir
      script: mkdir -p ${env.TARGETFOLDER}/metrics ${env.TARGETFOLDER}/charts
    list2: !CumulativeOracleActionPercentage
      data_path: ${env.TARGETFOLDER}/data-*.parquet
      result_path: ${env.TARGETFOLDER}/metrics
      columns_mapping:
        selected_action_indexes: !PythonExpression "lambda row: row['actions']\n"
        all_action_rewards: !PythonExpression "lambda row: row['all_reward']\n"
    list3: !JupyterStage
      name: draw_graphs
      notebook_pipeline: experiments/simple/draw_graphs.draw_graphs_pipeline
    list4: finalizing stage
